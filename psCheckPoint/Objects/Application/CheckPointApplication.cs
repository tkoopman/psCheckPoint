using Newtonsoft.Json;

namespace psCheckPoint.Objects.Application
{
    /// <summary>
    /// <para type="description">Details of a Check Point Application/Site</para>
    /// </summary>
    public class CheckPointApplication : CheckPointObjectFull
    {
        /// <summary>
        /// JSON Constructor for Network
        /// </summary>
        [JsonConstructor]
        private CheckPointApplication(string name, string uID, string type, CheckPointDomain domain, string icon, CheckPointMetaInfo metaInfo, bool readOnly, CheckPointObject[] tags, string color, string comments,
            CheckPointObject[] groups, string[] additionalCategories, int applicationID, string applicationSignature, string description, string primaryCategory, string risk, string[] urlList, bool urlsDefinedAsRegularExpression, bool userDefined) :
            base(name, uID, type, domain, icon, metaInfo, readOnly, tags, color, comments)
        {
            Groups = groups;
            AdditionalCategories = additionalCategories;
            ApplicationID = applicationID;
            ApplicationSignature = applicationSignature;
            Description = description;
            PrimaryCategory = primaryCategory;
            Risk = risk;
            UrlList = urlList;
            UrlsDefinedAsRegularExpression = urlsDefinedAsRegularExpression;
            UserDefined = userDefined;
        }

        /// <summary>
        /// <para type="description">How much details are returned depends on the details-level field of the request. This table shows the level of detail shown when details-level is set to standard.</para>
        /// </summary>
        [JsonProperty(PropertyName = "groups", DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore)]
        public CheckPointObject[] Groups { get; private set; }

        /// <summary>
        /// <para type="description">Additional categories of a custom application / site used in the Application and URL Filtering or Threat Prevention.</para>
        /// </summary>
        [JsonProperty(PropertyName = "additional-categories", DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore)]
        public string[] AdditionalCategories { get; private set; }

        /// <summary>
        /// <para type="description">Application ID</para>
        /// </summary>
        [JsonProperty(PropertyName = "application-id", DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore)]
        public int ApplicationID { get; private set; }

        /// <summary>
        /// <para type="description">Application signature generated by Signature Tool.</para>
        /// </summary>
        [JsonProperty(PropertyName = "application-signature", DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore)]
        public string ApplicationSignature { get; private set; }

        /// <summary>
        /// <para type="description">Application description.</para>
        /// </summary>
        [JsonProperty(PropertyName = "description", DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; private set; }

        /// <summary>
        /// <para type="description">Primary application category.</para>
        /// </summary>
        [JsonProperty(PropertyName = "primary-category", DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore)]
        public string PrimaryCategory { get; private set; }

        /// <summary>
        /// <para type="description">Application risk.</para>
        /// </summary>
        [JsonProperty(PropertyName = "risk", DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore)]
        public string Risk { get; private set; }

        /// <summary>
        /// <para type="description">URLs that determine this particular application.</para>
        /// </summary>
        [JsonProperty(PropertyName = "url-list", DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore)]
        public string[] UrlList { get; private set; }

        /// <summary>
        /// <para type="description">URLs defined as regular expression.</para>
        /// </summary>
        [JsonProperty(PropertyName = "urls-defined-as-regular-expression", DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore)]
        public bool UrlsDefinedAsRegularExpression { get; private set; }

        /// <summary>
        /// <para type="description">True if this application site was defined by user (not predefined one).</para>
        /// </summary>
        [JsonProperty(PropertyName = "user-defined", DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore)]
        public bool UserDefined { get; private set; }
    }
}