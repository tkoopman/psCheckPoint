using Newtonsoft.Json;
using System.Management.Automation;
using System.Runtime.Serialization;

namespace psCheckPoint.Objects.Application
{
    /// <api cmd="set-application-site">Set-CheckPointApplication</api>
    /// <summary>
    /// <para type="synopsis">Edit existing object using object name or uid.</para>
    /// <para type="description"></para>
    /// </summary>
    /// <example>
    /// </example>
    [Cmdlet(VerbsCommon.Set, "CheckPointApplication", DefaultParameterSetName = "Base Details Only")]
    [OutputType(typeof(CheckPointApplication))]
    public class SetCheckPointApplication : SetCheckPointObject<CheckPointApplication>
    {
        public override string Command { get { return "set-application-site"; } }

        [JsonProperty(PropertyName = "groups", NullValueHandling = NullValueHandling.Ignore)]
        private dynamic _groups;

        /// <summary>
        /// <para type="description">Action to take with groups.</para>
        /// </summary>
        [Parameter]
        public MembershipActions GroupAction { get; set; } = MembershipActions.Replace;

        /// <summary>
        /// <para type="description">Collection of group identifiers.</para>
        /// <para type="description">Groups listed will be either Added, Removed or replace the current list of group membership based on GroupAction parameter.</para>
        /// </summary>
        [Parameter(ValueFromPipelineByPropertyName = true)]
        public string[] Groups { get; set; }

        [OnSerializing]
        private void OnSerializing(StreamingContext context)
        {
            _groups = ProcessGroupAction(GroupAction, Groups);
            _urls = ProcessGroupAction(UrlAction, UrlList);
            _applicationSignatures = ProcessGroupAction(ApplicationSignatureAction, ApplicationSignature);
            _additionalCategories = ProcessGroupAction(AdditionalCategoriesAction, AdditionalCategories);
        }

        /// <summary>
        /// <para type="description">Each application is assigned to one primary category based on its most defining aspect.</para>
        /// </summary>
        [JsonProperty(PropertyName = "primary-category", NullValueHandling = NullValueHandling.Ignore)]
        [Parameter(ValueFromPipelineByPropertyName = true)]
        public string PrimaryCategory { get; set; }

        /// <summary>
        /// <para type="description">Action to take with URLs.</para>
        /// </summary>
        [Parameter]
        public MembershipActions UrlAction { get; set; } = MembershipActions.Replace;

        /// <summary>
        /// <para type="description">URLs that determine this particular application.</para>
        /// </summary>
        [Parameter(ValueFromPipelineByPropertyName = true, ParameterSetName = "By URLs")]
        public string[] UrlList { get; set; }

        [JsonProperty(PropertyName = "url-list", NullValueHandling = NullValueHandling.Ignore)]
        private dynamic _urls;

        /// <summary>
        /// <para type="description">Action to take with Application Signatures.</para>
        /// </summary>
        [Parameter]
        public MembershipActions ApplicationSignatureAction { get; set; } = MembershipActions.Replace;

        /// <summary>
        /// <para type="description">Application signature generated by Signature Tool.</para>
        /// </summary>
        [Parameter(ValueFromPipelineByPropertyName = true, ParameterSetName = "By Application Signature")]
        public string[] ApplicationSignature { get; set; }

        [JsonProperty(PropertyName = "application-signature", NullValueHandling = NullValueHandling.Ignore)]
        private dynamic _applicationSignatures;

        /// <summary>
        /// <para type="description">Action to take with Additional Categories.</para>
        /// </summary>
        [Parameter]
        public MembershipActions AdditionalCategoriesAction { get; set; } = MembershipActions.Replace;

        /// <summary>
        /// <para type="description">Used to configure or edit the additional categories of a custom application / site used in the Application and URL Filtering or Threat Prevention.</para>
        /// </summary>
        [Parameter(ValueFromPipelineByPropertyName = true)]
        public string[] AdditionalCategories { get; set; }

        [JsonProperty(PropertyName = "additional-categories", NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        private dynamic _additionalCategories;

        /// <summary>
        /// <para type="description">A description for the application.</para>
        /// </summary>
        [JsonProperty(PropertyName = "description", NullValueHandling = NullValueHandling.Ignore)]
        [Parameter(ValueFromPipelineByPropertyName = true)]
        public string Description { get; set; }

        /// <summary>
        /// <para type="description">States whether the URL is defined as a Regular Expression or not.</para>
        /// </summary>
        [JsonProperty(PropertyName = "urls-defined-as-regular-expression", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [JsonConverter(typeof(SwitchJsonConverter))]
        [Parameter]
        public SwitchParameter UrlsDefinedAsRegularExpression { get; set; }
    }
}