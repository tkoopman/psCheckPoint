using Koopman.CheckPoint;
using System.Linq;
using System.Management.Automation;
using System.Threading.Tasks;

namespace psCheckPoint.Objects.Application
{
    /// <api cmd="add-application-site">New-CheckPointApplication</api>
    /// <summary>
    /// <para type="synopsis">Create new application.</para>
    /// <para type="description"></para>
    /// </summary>
    /// <example>
    /// <code>
    /// New-CheckPointApplication -Name MyApp -PrimaryCategory "Low Risk" -UrlList www.google.com,www.bing.com
    /// </code>
    /// </example>
    [Cmdlet(VerbsCommon.New, "CheckPointApplication")]
    [OutputType(typeof(Koopman.CheckPoint.ApplicationSite))]
    public class NewCheckPointApplication : NewCheckPointObject
    {
        #region Fields

        private string[] _additionalCategories;

        private string[] _applicationSignatures;

        private string[] _groups;

        private string[] _urls;

        #endregion Fields

        #region Properties

        /// <summary>
        /// <para type="description">
        /// Used to configure or edit the additional categories of a custom application / site used
        /// in the Application and URL Filtering or Threat Prevention.
        /// </para>
        /// </summary>
        [Parameter(ValueFromPipelineByPropertyName = true)]
        public string[] AdditionalCategories { get => _additionalCategories; set => _additionalCategories = CreateArray(value); }

        /// <summary>
        /// <para type="description">Application signature generated by Signature Tool.</para>
        /// </summary>
        [Parameter(ValueFromPipelineByPropertyName = true, Mandatory = true, ParameterSetName = "By Application Signature")]
        public string[] ApplicationSignature { get => _applicationSignatures; set => _applicationSignatures = CreateArray(value); }

        /// <summary>
        /// <para type="description">A description for the application.</para>
        /// </summary>
        [Parameter(ValueFromPipelineByPropertyName = true)]
        public string Description { get; set; }

        /// <summary>
        /// <para type="description">Collection of group identifiers.</para>
        /// </summary>
        [Parameter(ValueFromPipelineByPropertyName = true)]
        public string[] Groups { get => _groups; set => _groups = CreateArray(value); }

        /// <summary>
        /// <para type="description">
        /// Each application is assigned to one primary category based on its most defining aspect.
        /// </para>
        /// </summary>
        [Parameter(ValueFromPipelineByPropertyName = true, Mandatory = true)]
        public string PrimaryCategory { get; set; }

        /// <summary>
        /// <para type="description">URLs that determine this particular application.</para>
        /// </summary>
        [Parameter(ValueFromPipelineByPropertyName = true, Mandatory = true, ParameterSetName = "By URLs")]
        public string[] UrlList { get => _urls; set => _urls = CreateArray(value); }

        /// <summary>
        /// <para type="description">
        /// States whether the URL is defined as a Regular Expression or not.
        /// </para>
        /// </summary>
        [Parameter]
        public SwitchParameter UrlsDefinedAsRegularExpression { get; set; }

        #endregion Properties

        #region Methods

        /// <inheritdoc />
        protected override async Task ProcessRecordAsync()
        {
            var o = new Koopman.CheckPoint.ApplicationSite(Session, SetIfExists.IsPresent) { };
            UpdateProperties(o);
            await o.AcceptChanges(Ignore, cancellationToken: CancelProcessToken);
            WriteObject(o);
        }

        /// <inheritdoc />
        protected override bool UpdateProperty(IObjectSummary obj, string name, object value)
        {
            if (base.UpdateProperty(obj, name, value)) return true;

            var o = (ApplicationSite)obj;
            switch (name)
            {
                case nameof(AdditionalCategories):
                    foreach (string c in AdditionalCategories ?? Enumerable.Empty<string>())
                        o.AdditionalCategories.Add(c);
                    return true;

                case nameof(ApplicationSignature):
                    foreach (string s in ApplicationSignature ?? Enumerable.Empty<string>())
                        o.ApplicationSignature.Add(s);
                    return true;

                case nameof(Groups):
                    foreach (string g in Groups ?? Enumerable.Empty<string>())
                        o.Groups.Add(g);
                    return true;

                case nameof(UrlList):
                    foreach (string u in UrlList ?? Enumerable.Empty<string>())
                        o.UrlList.Add(u);
                    return true;

                default:
                    return false;
            }
        }

        #endregion Methods
    }
}